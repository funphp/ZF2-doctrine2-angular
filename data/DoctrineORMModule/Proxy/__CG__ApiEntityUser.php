<?php

namespace DoctrineORMModule\Proxy\__CG__\Api\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Api\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function addGroup(\Api\Entity\Group $groups)
    {
        $this->__load();
        return parent::addGroup($groups);
    }

    public function removeGroup(\Api\Entity\Group $groups)
    {
        $this->__load();
        return parent::removeGroup($groups);
    }

    public function getGroups()
    {
        $this->__load();
        return parent::getGroups();
    }

    public function addMyGroup(\Api\Entity\Group $myGroups)
    {
        $this->__load();
        return parent::addMyGroup($myGroups);
    }

    public function removeMyGroup(\Api\Entity\Group $myGroups)
    {
        $this->__load();
        return parent::removeMyGroup($myGroups);
    }

    public function getMyGroups()
    {
        $this->__load();
        return parent::getMyGroups();
    }

    public function addSocial(\Api\Entity\SocialInfo $socials)
    {
        $this->__load();
        return parent::addSocial($socials);
    }

    public function removeSocial(\Api\Entity\SocialInfo $socials)
    {
        $this->__load();
        return parent::removeSocial($socials);
    }

    public function getSocials()
    {
        $this->__load();
        return parent::getSocials();
    }

    public function addMyGoal(\Api\Entity\Goal $myGoals)
    {
        $this->__load();
        return parent::addMyGoal($myGoals);
    }

    public function removeMyGoal(\Api\Entity\Goal $myGoals)
    {
        $this->__load();
        return parent::removeMyGoal($myGoals);
    }

    public function getMyGoals()
    {
        $this->__load();
        return parent::getMyGoals();
    }

    public function addAttachment(\Api\Entity\GoalAttachment $attachments)
    {
        $this->__load();
        return parent::addAttachment($attachments);
    }

    public function removeAttachment(\Api\Entity\GoalAttachment $attachments)
    {
        $this->__load();
        return parent::removeAttachment($attachments);
    }

    public function getAttachments()
    {
        $this->__load();
        return parent::getAttachments();
    }

    public function addComment(\Api\Entity\GoalComment $comments)
    {
        $this->__load();
        return parent::addComment($comments);
    }

    public function removeComment(\Api\Entity\GoalComment $comments)
    {
        $this->__load();
        return parent::removeComment($comments);
    }

    public function getComments()
    {
        $this->__load();
        return parent::getComments();
    }

    public function addTaskAttachment(\Api\Entity\TaskAttachment $taskAttachments)
    {
        $this->__load();
        return parent::addTaskAttachment($taskAttachments);
    }

    public function removeTaskAttachment(\Api\Entity\TaskAttachment $taskAttachments)
    {
        $this->__load();
        return parent::removeTaskAttachment($taskAttachments);
    }

    public function getTaskAttachments()
    {
        $this->__load();
        return parent::getTaskAttachments();
    }

    public function addTaskComment(\Api\Entity\TaskComment $taskComments)
    {
        $this->__load();
        return parent::addTaskComment($taskComments);
    }

    public function removeTaskComment(\Api\Entity\TaskComment $taskComments)
    {
        $this->__load();
        return parent::removeTaskComment($taskComments);
    }

    public function getTaskComments()
    {
        $this->__load();
        return parent::getTaskComments();
    }

    public function addOauthToken(\Api\Entity\OauthToken $oauthTokens)
    {
        $this->__load();
        return parent::addOauthToken($oauthTokens);
    }

    public function removeOauthToken(\Api\Entity\OauthToken $oauthTokens)
    {
        $this->__load();
        return parent::removeOauthToken($oauthTokens);
    }

    public function getOauthTokens()
    {
        $this->__load();
        return parent::getOauthTokens();
    }

    public function setSocialInfo(\Api\Entity\SocialInfo $socialInfo = NULL)
    {
        $this->__load();
        return parent::setSocialInfo($socialInfo);
    }

    public function getSocialInfo()
    {
        $this->__load();
        return parent::getSocialInfo();
    }

    public function setRole(\Api\Entity\Role $role = NULL)
    {
        $this->__load();
        return parent::setRole($role);
    }

    public function getRole()
    {
        $this->__load();
        return parent::getRole();
    }

    public function addGroupAssignGoal(\Api\Entity\Goal $groupAssignGoals)
    {
        $this->__load();
        return parent::addGroupAssignGoal($groupAssignGoals);
    }

    public function removeGroupAssignGoal(\Api\Entity\Goal $groupAssignGoals)
    {
        $this->__load();
        return parent::removeGroupAssignGoal($groupAssignGoals);
    }

    public function getGroupAssignGoals()
    {
        $this->__load();
        return parent::getGroupAssignGoals();
    }

    public function addGroupAssignTask(\Api\Entity\Task $groupAssignTasks)
    {
        $this->__load();
        return parent::addGroupAssignTask($groupAssignTasks);
    }

    public function removeGroupAssignTask(\Api\Entity\Task $groupAssignTasks)
    {
        $this->__load();
        return parent::removeGroupAssignTask($groupAssignTasks);
    }

    public function getGroupAssignTasks()
    {
        $this->__load();
        return parent::getGroupAssignTasks();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addGoal(\Api\Entity\Goal $goals)
    {
        $this->__load();
        return parent::addGoal($goals);
    }

    public function removeGoal(\Api\Entity\Goal $goals)
    {
        $this->__load();
        return parent::removeGoal($goals);
    }

    public function getGoals()
    {
        $this->__load();
        return parent::getGoals();
    }

    public function addTask(\Api\Entity\Task $tasks)
    {
        $this->__load();
        return parent::addTask($tasks);
    }

    public function removeTask(\Api\Entity\Task $tasks)
    {
        $this->__load();
        return parent::removeTask($tasks);
    }

    public function getTasks()
    {
        $this->__load();
        return parent::getTasks();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'goals', 'tasks', 'groups', 'myGroups', 'socials', 'myGoals', 'attachments', 'comments', 'taskAttachments', 'taskComments', 'oauthTokens', 'socialInfo', 'role', 'groupAssignGoals', 'groupAssignTasks');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}